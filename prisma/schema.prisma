datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?

  events Event[]

  role   Role   @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  roleId String
}

model Role {
  id          String @id @default(cuid())
  // user, moderator, admin
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Event {
  id                  String   @id @default(cuid())
  title               String
  description         String
  menuDescription     String?
  donationDescription String?
  date                DateTime
  slots               Int
  price               Int
  discounts           String?

  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId String @unique

  addressId String
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  eventResponses EventResponse[]

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdById String
}

model EventResponse {
  id           String   @id @default(cuid())
  name         String
  email        String
  phone        String   @default("")
  vegetarian   Boolean?
  student      Boolean?
  restrictions String?
  comment      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String
}

model Address {
  id          String  @id @default(cuid())
  streetName  String
  houseNumber String
  zip         String
  city        String
  events      Event[]

  @@unique([streetName, houseNumber, zip, city])
}

model Image {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  boardMember   BoardMember? @relation(fields: [boardMemberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  boardMemberId String?      @unique

  event Event?
}

model BoardMember {
  id       String @id @default(cuid())
  name     String
  position String

  image Image?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
