/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/events": {
    get: operations["get/events"];
    post: operations["post/events"];
  };
  "/events/{id}": {
    get: operations["get/events/{id}"];
    put: operations["put/events/{id}"];
    delete: operations["delete/events/{id}"];
  };
  "/event-responses": {
    get: operations["get/event-responses"];
    post: operations["post/event-responses"];
  };
  "/event-responses/{id}": {
    get: operations["get/event-responses/{id}"];
    put: operations["put/event-responses/{id}"];
    delete: operations["delete/event-responses/{id}"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Error: {
      data?: Record<string, never> | (Record<string, never>)[];
      error: {
        status?: number;
        name?: string;
        message?: string;
        details?: Record<string, never>;
      };
    };
    EventRequest: {
      data: {
        title: string;
        subtitle: string;
        summary: string;
        description: string;
        tags?: string;
        /** Format: date-time */
        date: string;
        /** Format: date-time */
        signupDate: string;
        slots: number;
        price: number;
        locationStreet: string;
        locationCity: string;
        /** @example string or id */
        cover: number | string;
        event_responses?: (number | string)[];
      };
    };
    EventListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["Event"];
    };
    EventListResponse: {
      data?: (components["schemas"]["EventListResponseDataItem"])[];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Event: {
      title: string;
      subtitle: string;
      summary: string;
      description: string;
      tags?: string;
      /** Format: date-time */
      date: string;
      /** Format: date-time */
      signupDate: string;
      slots: number;
      price: number;
      locationStreet: string;
      locationCity: string;
      cover: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: ({
                  id?: number;
                  attributes?: Record<string, never>;
                })[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  pathId?: number;
                  parent?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  children?: {
                    data?: ({
                        id?: number;
                        attributes?: Record<string, never>;
                      })[];
                  };
                  files?: {
                    data?: ({
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: ({
                                id?: number;
                                attributes?: Record<string, never>;
                              })[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                firstname?: string;
                                lastname?: string;
                                username?: string;
                                /** Format: email */
                                email?: string;
                                resetPasswordToken?: string;
                                registrationToken?: string;
                                isActive?: boolean;
                                roles?: {
                                  data?: ({
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: ({
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            })[];
                                        };
                                        permissions?: {
                                          data?: ({
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                subject?: string;
                                                properties?: unknown;
                                                conditions?: unknown;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            })[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    })[];
                                };
                                blocked?: boolean;
                                preferedLanguage?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      })[];
                  };
                  path?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      event_responses?: {
        data?: ({
            id?: number;
            attributes?: {
              name?: string;
              /** Format: email */
              email?: string;
              restriction_vegetarian?: boolean;
              restriction_vegan?: boolean;
              restriction_nuts?: boolean;
              restriction_dairy?: boolean;
              restriction_alcohol?: boolean;
              restriction_other?: string;
              comment?: string;
              termsOfService?: boolean;
              event?: {
                data?: {
                  id?: number;
                  attributes?: {
                    title?: string;
                    subtitle?: string;
                    summary?: string;
                    description?: string;
                    tags?: string;
                    /** Format: date-time */
                    date?: string;
                    /** Format: date-time */
                    signupDate?: string;
                    slots?: number;
                    price?: number;
                    locationStreet?: string;
                    locationCity?: string;
                    cover?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: ({
                                id?: number;
                                attributes?: Record<string, never>;
                              })[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    event_responses?: {
                      data?: ({
                          id?: number;
                          attributes?: Record<string, never>;
                        })[];
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                };
              };
              confirm_token?: string;
              /** @enum {string} */
              state?: "waiting" | "invite_sent" | "invite_confirmed" | "invite_cancelled";
              /** Format: date-time */
              invite_date?: string;
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              createdBy?: {
                data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                };
              };
              updatedBy?: {
                data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                };
              };
            };
          })[];
      };
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
    };
    EventResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["Event"];
    };
    EventResponse: {
      name: string;
      /** Format: email */
      email: string;
      restriction_vegetarian: boolean;
      restriction_vegan: boolean;
      restriction_nuts: boolean;
      restriction_dairy: boolean;
      restriction_alcohol: boolean;
      restriction_other?: string;
      comment?: string;
      termsOfService: boolean;
      event?: {
        data?: {
          id?: number;
          attributes?: {
            title?: string;
            subtitle?: string;
            summary?: string;
            description?: string;
            tags?: string;
            /** Format: date-time */
            date?: string;
            /** Format: date-time */
            signupDate?: string;
            slots?: number;
            price?: number;
            locationStreet?: string;
            locationCity?: string;
            cover?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: ({
                        id?: number;
                        attributes?: Record<string, never>;
                      })[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        pathId?: number;
                        parent?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        children?: {
                          data?: ({
                              id?: number;
                              attributes?: Record<string, never>;
                            })[];
                        };
                        files?: {
                          data?: ({
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: ({
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    })[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: {
                                      firstname?: string;
                                      lastname?: string;
                                      username?: string;
                                      /** Format: email */
                                      email?: string;
                                      resetPasswordToken?: string;
                                      registrationToken?: string;
                                      isActive?: boolean;
                                      roles?: {
                                        data?: ({
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              code?: string;
                                              description?: string;
                                              users?: {
                                                data?: ({
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  })[];
                                              };
                                              permissions?: {
                                                data?: ({
                                                    id?: number;
                                                    attributes?: {
                                                      action?: string;
                                                      subject?: string;
                                                      properties?: unknown;
                                                      conditions?: unknown;
                                                      role?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                    };
                                                  })[];
                                              };
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            };
                                          })[];
                                      };
                                      blocked?: boolean;
                                      preferedLanguage?: string;
                                      /** Format: date-time */
                                      createdAt?: string;
                                      /** Format: date-time */
                                      updatedAt?: string;
                                      createdBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      updatedBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                    };
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            })[];
                        };
                        path?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            event_responses?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    name?: string;
                    /** Format: email */
                    email?: string;
                    restriction_vegetarian?: boolean;
                    restriction_vegan?: boolean;
                    restriction_nuts?: boolean;
                    restriction_dairy?: boolean;
                    restriction_alcohol?: boolean;
                    restriction_other?: string;
                    comment?: string;
                    termsOfService?: boolean;
                    event?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    confirm_token?: string;
                    /** @enum {string} */
                    state?: "waiting" | "invite_sent" | "invite_confirmed" | "invite_cancelled";
                    /** Format: date-time */
                    invite_date?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                })[];
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      confirm_token?: string;
      /** @enum {string} */
      state: "waiting" | "invite_sent" | "invite_confirmed" | "invite_cancelled";
      /** Format: date-time */
      invite_date?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
    };
    EventResponseRequest: {
      data: {
        name: string;
        /** Format: email */
        email: string;
        restriction_vegetarian: boolean;
        restriction_vegan: boolean;
        restriction_nuts: boolean;
        restriction_dairy: boolean;
        restriction_alcohol: boolean;
        restriction_other?: string;
        comment?: string;
        termsOfService: boolean;
        /** @example string or id */
        event?: number | string;
        confirm_token?: string;
        /** @enum {string} */
        state: "waiting" | "invite_sent" | "invite_confirmed" | "invite_cancelled";
        /** Format: date-time */
        invite_date?: string;
      };
    };
    EventResponseListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["EventResponse"];
    };
    EventResponseListResponse: {
      data?: (components["schemas"]["EventResponseListResponseDataItem"])[];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    EventResponseResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["EventResponse"];
    };
    EventResponseResponse: {
      data?: components["schemas"]["EventResponseResponseDataObject"];
      meta?: Record<string, never>;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  "get/events": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EventListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/events": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EventResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/events/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EventResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/events/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EventResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/events/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/event-responses": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EventResponseListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/event-responses": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventResponseRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EventResponseResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/event-responses/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EventResponseResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/event-responses/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventResponseRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EventResponseResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/event-responses/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}
